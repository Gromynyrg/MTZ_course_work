import MTZ_V
import data_creation
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware


class UserStates(StatesGroup):
    init = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    sizes = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
    rectangles = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª-–≤–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    common = State()    # –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


API_TOKEN = '5807405189:AAF2R27fx9qqsjnWVrNOHio1BpJvcH0WCMY'
bot = Bot(token=API_TOKEN)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∫ –µ–≥–æ —Ç–æ–∫–µ–Ω—É
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

i = 0
k = 0
mas = []
x_size = 0
y_size = 0

kb = [
    [
        types.KeyboardButton(text="–•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"),
        types.KeyboardButton(text="–ü–æ–º–æ—â—å"),
        types.KeyboardButton(text="–Ø —Ö–æ—á—É —Å–∞–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    ],
]  # –ó–∞–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞
keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

@dp.message_handler(commands=['start'], state='*')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
async def send_welcome(message: types.Message):
    user_name = message.from_user.username
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã \n–Ø –ë–æ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ú–¢–ó!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        reply_markup=keyboard)  # –¢–∞–∫ –∫–∞–∫ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º await.
    await UserStates.common.set()


@dp.message_handler(text="–•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", state=UserStates.common)
async def send_reply(message: types.Message):
    await message.reply("–í–∞–º –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ '.txt','.csv' –∏–ª–∏ '.xlsx'")

    @dp.message_handler(content_types=['document'], state=UserStates.common)  # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–π–ª
    async def send_file(message: types.Message):
        if (message.document.mime_type == 'text/csv' or message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or message.document.mime_type == 'text/plain'):
            await message.answer_chat_action(action=types.ChatActions.TYPING)
            file_name = message.document.file_name
            await message.document.download(destination_file=file_name)
            photo1 = MTZ_V.mtz_sol(file_name)
            photoq1 = open(photo1, 'rb')
            photoq2 = open('visual_ro.png', 'rb')
            photoq3 = open('visual_ro2.png', 'rb')
            photoq4 = open('visual_phi.png', 'rb')
            photoq5 = open('visual_phi2.png', 'rb')
            await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            await bot.send_photo(chat_id=message.chat.id, photo=photoq1)
            await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö œÅ –∫–∞–∂—É—â–µ–≥–æ—Å—è")
            await bot.send_photo(chat_id=message.chat.id, photo=photoq2)
            await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è œÅ –∫–∞–∂—É—â–µ–≥–æ—Å—è")
            await bot.send_photo(chat_id=message.chat.id, photo=photoq3)
            await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö œÜ ")
            await bot.send_photo(chat_id=message.chat.id, photo=photoq4)
            await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è œÜ ")
            await bot.send_photo(chat_id=message.chat.id, photo=photoq5)
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞: '.txt', '.csv' –∏–ª–∏ '.xlsx'")


@dp.message_handler(text="–Ø —Ö–æ—á—É —Å–∞–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", state=UserStates.common)
async def send_reply(message: types.Message):
    await message.answer("–•–æ—Ä–æ—à–æ, –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª - —Ä–∞–∑–º–µ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥—ã ")
    await UserStates.init.set()


@dp.message_handler(state=UserStates.init)
async def get_size(message: types.Message):
    sizes = []
    def isint():
        try:
            sizes = [int(x) for x in message.text.split()]
            return True
        except ValueError:
            return False
    b = isint()
    if b:
        sizes = [int(x) for x in message.text.split()]
    if ((len(sizes) == 3)and b):
        await message.answer("–•–æ—Ä–æ—à–æ, –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ - –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        data_creation.init_file(id_user=message.from_user.id, column=sizes[0], row=sizes[1], field_density=sizes[2])
        global mas,x_size,y_size
        mas = []
        x_size = sizes[0]
        y_size = sizes[1]
        for u in range(sizes[0]):
            lst = []
            for j in range(sizes[1]):
                lst.append(100)

            mas.append(lst)

        await UserStates.sizes.set()

    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–∏–¥–µ")


@dp.message_handler(state=UserStates.sizes)
async def get_count_rec(message: types.Message):
    def isint2():
        try:
            rect_count = int(message.text)
            return True
        except ValueError:
            return False
    b = isint2()
    if b:
        rect_count = int(message.text)
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å - 5 —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        await UserStates.rectangles.set()
        global i
        i = 0
        i = rect_count
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–∏–¥–µ")


@dp.message_handler(state=UserStates.rectangles)
async def get_rect(message: types.Message):
    global i, k, mas

    if (i > k+1):
        rect = [int(x) for x in message.text.split()]
        if (len(rect) == 5):
            k += 1
            for _ in range(rect[0] - 1, rect[2] + rect[0] - 1):
                for __ in range(rect[1] - 1, rect[3] + rect[1] - 1):
                    mas[_][__] = rect[4]
            await message.answer(f"{k + 1} –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ - ")
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –µ—â–µ —Ä–∞–∑ ")
    else:
        rect = [int(x) for x in message.text.split()]
        if (len(rect) == 5):
            k += 1
            for _ in range(rect[0] - 1, rect[2] + rect[0] - 1):
                for __ in range(rect[1] - 1, rect[3] + rect[1] - 1):
                    mas[_][__] = rect[4]
        await message.answer("–í—Å—ë –≥–æ—Ç–æ–≤–æ, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        await message.answer_chat_action(action=types.ChatActions.TYPING)
        data_creation.fill_in(id_user=message.from_user.id, mas=mas, x_size=x_size, y_size=y_size)
        k = 0
        file_name = f'{message.from_user.id}.txt'
        photo1 = MTZ_V.mtz_sol(file_name)
        photoq1 = open(photo1, 'rb')
        photoq2 = open('visual_ro.png', 'rb')
        photoq3 = open('visual_ro2.png', 'rb')
        photoq4 = open('visual_phi.png', 'rb')
        photoq5 = open('visual_phi2.png', 'rb')
        await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        await bot.send_photo(chat_id=message.chat.id, photo=photoq1)
        await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö œÅ –∫–∞–∂—É—â–µ–≥–æ—Å—è")
        await bot.send_photo(chat_id=message.chat.id, photo=photoq2)
        await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è œÅ –∫–∞–∂—É—â–µ–≥–æ—Å—è")
        await bot.send_photo(chat_id=message.chat.id, photo=photoq3)
        await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö œÜ ")
        await bot.send_photo(chat_id=message.chat.id, photo=photoq4)
        await message.reply("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è œÜ ")
        await bot.send_photo(chat_id=message.chat.id, photo=photoq5)
        await UserStates.common.set()



@dp.message_handler(text="–ü–æ–º–æ—â—å",state=UserStates.common)
async def send_help(message: types.Message):
    await message.reply("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
